import os

from loguru import logger


def read_config():
    import json

    cfg = {
        "DIR": {
            "SOURCE_ROOT_DIR": os.environ.get("SOURCE_ROOT_DIR", "./music/"),
            "BG_ROOT_DIR": os.environ.get("BG_ROOT_DIR", "./aug/bg/"),
            "IR_ROOT_DIR": os.environ.get("IR_ROOT_DIR", "./aug/ir/"),
            "LOG_ROOT_DIR": os.environ.get("LOG_ROOT_DIR", "logs/"),
        },
        "BSZ": {
            "TR_BATCH_SZ": int(os.environ.get("TR_BATCH_SZ", "120")),
            "TR_N_ANCHOR": int(os.environ.get("TR_N_ANCHOR", "60")),
            "VAL_BATCH_SZ": int(os.environ.get("VAL_BATCH_SZ", "120")),
            "VAL_N_ANCHOR": int(os.environ.get("VAL_N_ANCHOR", "60")),
            "TS_BATCH_SZ": int(os.environ.get("TS_BATCH_SZ", "125")),
        },
        "MODEL": {
            "DUR": float(os.environ.get("MODEL_DUR", "1.0")),
            "HOP": float(os.environ.get("MODEL_HOP", "0.5")),
            "FS": int(os.environ.get("MODEL_FS", "8000")),
            "STFT_WIN": int(os.environ.get("STFT_WIN", "1024")),
            "STFT_HOP": int(os.environ.get("STFT_HOP", "256")),
            "N_MELS": int(os.environ.get("N_MELS", "64")),
            "F_MIN": int(os.environ.get("F_MIN", "300")),
            "F_MAX": int(os.environ.get("F_MAX", "4000")),
            "FEAT": os.environ.get("MODEL_FEAT", "melspec"),
            "EMB_SZ": int(os.environ.get("EMB_SZ", "64")),
        },
        "LOSS": {
            "TAU": float(os.environ.get("LOSS_TAU", "0.05")),
        },
        "TD_AUG": {
            "TR_SNR": [
                int(os.environ.get("TR_SNR_MIN", "0")),
                int(os.environ.get("TR_SNR_MAX", "10")),
            ],
            "TS_SNR": [
                int(os.environ.get("TS_SNR_MIN", "0")),
                int(os.environ.get("TS_SNR_MAX", "10")),
            ],
            "VAL_SNR": [
                int(os.environ.get("VAL_SNR_MIN", "0")),
                int(os.environ.get("VAL_SNR_MAX", "10")),
            ],
            "TR_BG_AUG": os.environ.get("TR_BG_AUG", True),
            "TS_BG_AUG": os.environ.get("TS_BG_AUG", True),
            "VAL_BG_AUG": os.environ.get("VAL_BG_AUG", True),
            "TR_IR_AUG": os.environ.get("TR_IR_AUG", True),
            "TS_IR_AUG": os.environ.get("TS_IR_AUG", True),
            "VAL_IR_AUG": os.environ.get("VAL_IR_AUG", True),
        },
        "SPEC_AUG": {
            "SPECAUG_CHAIN": json.loads(
                os.environ.get("SPECAUG_CHAIN", '["cutout","horizontal"]')
            ),
            "SPECAUG_PROBS": float(os.environ.get("SPECAUG_PROBS", "1.0")),
            "SPECAUG_N_HOLES": int(os.environ.get("SPECAUG_N_HOLES", "1")),
            "SPECAUG_HOLE_FILL": os.environ.get("SPECAUG_HOLE_FILL", "zeros"),
        },
        "TRAIN": {
            "MAX_EPOCH": int(os.environ.get("MAX_EPOCH", "10")),
            "OPTIMIZER": os.environ.get(
                "OPTIMIZER", "Adam"
            ),  # 'LAMB' or 'Adam'. LAMB for BSZ >= 240
            "LR": float(os.environ.get("LR", "1e-4")),  # Initial learning rate.
            # Usually in the range from 3e-5 to 1e-4 (BSZ < 1280)
            "LR_SCHEDULE": os.environ.get(
                "LR_SCHEDULE", "cos"
            ),  # ['cos', 'cos-restart', 'None'].
            "CHECKPOINT_KEEP_N_HOUR": int(
                os.environ.get("CHECKPOINT_KEEP_N_HOUR", "1")
            ),
            "TENSORBOARD": os.environ.get("TENSORBOARD", True),
            "SAVE_IMG": os.environ.get(
                "SAVE_IMG", True
            ),  # Saving similarity matrix generated by loss object.
            "MINI_TEST_IN_TRAIN": os.environ.get("MINI_TEST_IN_TRAIN", True),
            "MAX_NUM_ITEMS": int(os.environ.get("MAX_NUM_ITEMS", None))
            if os.environ.get("MAX_NUM_ITEMS", None) is not None
            else None,
        },
        "QUERY": {
            "INDEXER_URL": os.environ.get("INDEXER_URL"),
            "INDEX_DB_URI": os.environ.get("INDEX_DB_URI"),
            "CHECKPOINT_URI": os.environ.get("CHECKPOINT_URI"),
        },
        "SONGS_UPLOADER": {"URL": os.environ.get("SONGS_UPLOADER_URL")},
    }
    logger.info(f"Loading configuration{cfg}")
    return cfg
